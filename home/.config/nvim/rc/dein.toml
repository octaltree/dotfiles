[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
[[plugins]]
repo = 'octaltree/linearf'
merged = 0
[[plugins]]
repo = 'octaltree/linearf-my-flavors'
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0

[[plugins]] # solarized {{{
repo = 'lifepillar/vim-solarized8'
hook_add='''
let g:solarized_termtrans=1
let g:solarized_extra_hi_groups = 1
autocmd VimEnter * nested colorscheme solarized8
autocmd ColorScheme * hi Folded guifg=#839496 guibg=None guisp=#002b36 gui=None cterm=None
autocmd ColorScheme * hi NormalFloat guibg=None
''' # }}}

[[plugins]] # nerdcommenter {{{
repo = 'preservim/nerdcommenter'
hook_add = '''
let g:loaded_nerd_comments = 1
function s:InitVariable(var, value)
    if !exists(a:var)
        execute 'let ' . a:var . ' = ' . string(a:value)
    endif
endfunction
call s:InitVariable('g:NERDAllowAnyVisualDelims', 1)
call s:InitVariable('g:NERDBlockComIgnoreEmpty', 0)
call s:InitVariable('g:NERDCommentWholeLinesInVMode', 0)
call s:InitVariable('g:NERDCommentEmptyLines', 0)
call s:InitVariable('g:NERDCompactSexyComs', 0)
call s:InitVariable('g:NERDCreateDefaultMappings', 1)
call s:InitVariable('g:NERDDefaultNesting', 1)
call s:InitVariable('g:NERDMenuMode', 3)
call s:InitVariable('g:NERDLPlace', '[>')
call s:InitVariable('g:NERDUsePlaceHolders', 1)
call s:InitVariable('g:NERDRemoveAltComs', 1)
call s:InitVariable('g:NERDRemoveExtraSpaces', 0)
call s:InitVariable('g:NERDRPlace', '<]')
call s:InitVariable('g:NERDSpaceDelims', 0)
call s:InitVariable('g:NERDDefaultAlign', 'none')
call s:InitVariable('g:NERDTrimTrailingWhitespace', 0)
call s:InitVariable('g:NERDToggleCheckAllLines', 0)
call s:InitVariable('g:NERDDisableTabsInBlockComm', 0)
call s:InitVariable('g:NERDSuppressWarnings', 0)

let g:NERDDefaultAlign = 'left'

function! s:CreateMaps(modes, target, desc, combo)
    " Build up a map command like
    " 'noremap <silent> <Plug>NERDCommenterComment :call nerdcommenter#Comment("n", "Comment")'
    let plug = '<Plug>NERDCommenter' . a:target
    let plug_start = 'noremap <silent> ' . plug . ' :call nerdcommenter#Comment("'
    let plug_end = '", "' . a:target . '")<CR>'
    " Build up a menu command like
    " 'menu <silent> comment.Comment<Tab>\\cc <Plug>NERDCommenterComment'
    let menuRoot = get(['', 'comment', '&comment', '&Plugin.&comment', '&Plugin.Nerd\ &Commenter'],
                \ g:NERDMenuMode, '')
    let menu_command = 'menu <silent> ' . menuRoot . '.' . escape(a:desc, ' ')
    if strlen(a:combo)
        let leader = exists('g:mapleader') ? g:mapleader : '\'
        let menu_command .= '<Tab>' . escape(leader, '\') . a:combo
    endif
    let menu_command .= ' ' . (strlen(a:combo) ? plug : a:target)
    " Execute the commands built above for each requested mode.
    for mode in (a:modes ==# '') ? [''] : split(a:modes, '\zs')
        if strlen(a:combo)
            execute mode . plug_start . mode . plug_end
            if g:NERDCreateDefaultMappings && !hasmapto(plug, mode)
                execute mode . 'map <leader>' . a:combo . ' ' . plug
            endif
        endif
        " Check if the user wants the menu to be displayed.
        if g:NERDMenuMode !=# 0
            execute mode . menu_command
        endif
    endfor
endfunction

call s:CreateMaps('nx', 'Toggle',     'Toggle', 'c<Space>')
''' # }}}

# cmp {{{
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
[[plugins]]
repo = 'octaltree/cmp-look'
[[plugins]]
repo = 'hrsh7th/cmp-path'
#[[plugins]]
#repo = 'hrsh7th/cmp-vsnip'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
[[plugins]]
repo = 'ray-x/cmp-treesitter'
[[plugins]]
repo = 'rafamadriz/friendly-snippets'
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
# }}}

[[plugins]] # denite {{{
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
  nnoremap [Denite] <Nop>
  nmap <silent><space> [Denite]
  nnoremap [Denite]f :<c-u>Denite file/rec<CR>
  nnoremap [Denite]o :<c-u>Denite file/old<CR>
  nnoremap [Denite]/ :<c-u>Denite line<CR>
  nnoremap [Denite]g :<c-u>Denite grep<CR>
  nnoremap [Denite]r :<c-u>Denite -resume<CR>
  nnoremap [Denite]<space> :Denite source<CR>
  nnoremap [Denite]t :Denite buffer -default-action=tabswitch<CR>
  nnoremap [Denite]d :Denite lsp_references<CR>
  nnoremap [Denite]c/ :<c-u>DeniteCursorWord line<CR>
  nnoremap [Denite]cg :<c-u>DeniteCursorWord grep<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <cr>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> t
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr><nowait> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <space>
    \ denite#do_map('toggle_select')
  endfunction
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <ESC> <Plug>(denite_filter_update)
    imap <silent><buffer> <CR> <ESC><CR>
  endfunction
  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.9
  call denite#custom#option('default', {
      \ 'split': 'horizontal',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'prompt': '> ',
      \ })
  call denite#custom#kind('file', 'default_action', 'switch')

  if executable("ag")
    call denite#custom#var('file/rec', 'command',
        \ ['ag', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
  if executable("rg")
    call denite#custom#var('file/rec', 'command',
        \ ['rg', '--hidden', '--follow', '--files', '-g', '!.git'])
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--no-heading', '--vimgrep', '-g', '!.git'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
'''
[[plugins]]
repo = 'liuchengxu/vim-clap'
on_cmd = 'Denite'
depends = ['denite.nvim']
build='make'
hook_add='''
call denite#custom#filter('matcher/clap', 'clap_path', expand('~/.config/nvim/dein/repos/github.com/liuchengxu/vim-clap'))
call denite#custom#source('_', 'matcher', ['matcher/clap'])
'''
[[plugins]]
repo = 'octaltree/rustdoc-index'
on_cmd = 'Denite'
depends = ['denite.nvim']
build = 'make denite'
hook_add = '''
nnoremap <silent><space>s :<c-u>Denite rustdoc-index<CR>
'''
# }}}

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add='''
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
'''


# vim: foldmethod=marker
