[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]] # deoplete source from syntax highlight
repo = 'Shougo/neco-syntax'
[[plugins]]
repo = 'Shougo/neosnippet-snippets'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'sheerun/vim-polyglot'
[[plugins]]
repo = 'simeji/winresizer'
[[plugins]]
repo = 'yuratomo/w3m.vim'
[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
#repo = 'altercation/vim-colors-solarized'
repo = 'lifepillar/vim-solarized8'
hook_add='''
  "colorscheme solarized
  "let g:solarized_visibility="low"
  "let g:solarized_termcolors=256
  let g:solarized_termtrans=1
  autocmd VimEnter * nested colorscheme solarized8
'''
[[plugins]]
repo = 'bronson/vim-trailing-whitespace'
hook_source='''
let g:extra_whitespace_ignored_filetypes=['denite']
autocmd BufWinEnter * if ShouldMatchWhitespace() | match ExtraWhitespace /\\\@<![\u3000[:space:]]\+$/ | else | match ExtraWhitespadce /^^/ | endif
'''

# denite {{{
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add='''
  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.8
  call denite#custom#option('default', {
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'prompt': '> ',
      \ })
  hi NormalFloat guifg=#586e75 guibg=#fdf6e3 guisp=NONE gui=NONE cterm=NONE

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <cr>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr><nowait> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <space>
    \ denite#do_map('toggle_select')
  endfunction
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <esc> <Plug>(denite_filter_quit)
    imap <silent><buffer> <cr> <esc><cr>
  endfunction
  nnoremap [Denite] <Nop>
  nmap <silent><space> [Denite]
  nnoremap [Denite]f :<c-u>Denite file/rec<CR>
  nnoremap [Denite]m :<c-u>Denite file_mru<CR>
  nnoremap [Denite]/ :<c-u>Denite line<CR>
  nnoremap [Denite]g :<c-u>Denite grep<CR>
  nnoremap [Denite]r :<c-u>Denite -resume<CR>
  nnoremap [Denite]<space> :Denite source<CR>

  if executable("ag")
    call denite#custom#var('file/rec', 'command',
        \ ['ag', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet.vim'
hook_add='''
imap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
smap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
nmap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
xmap <silent><expr> <tab> neosnippet#expandable()? "\<Plug>(neosnippet_expand_target)": "\<tab>"
"let g:neosnippet#enable_complete_done = 1
'''

# languageclient {{{
[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = './install.sh'
hook_add = '''
set hidden
let g:LanguageClient_loggingFile = '/tmp/languageclient.log'
  let g:LanguageClient_serverCommands = {}
if executable('clangd')
  let g:LanguageClient_serverCommands['c'] = ['clangd']
  let g:LanguageClient_serverCommands['cpp'] = ['clangd']
endif
if executable('pyls')
  let g:LanguageClient_serverCommands['python'] = ['pyls']
endif
if executable('stack')
  let g:LanguageClient_serverCommands['haskell'] = ['stack', 'exec', 'hie', '--', '--lsp']
endif
if executable('rls')
  let g:LanguageClient_serverCommands['rust'] = ['rls']
endif
if executable('purescript-language-server')
  let g:LanguageClient_serverCommands['purescript'] = ['purescript-language-server', '--stdio']
endif

function LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    " any keybindings you want, such as ...
    nnoremap <buffer><silent>K :call LanguageClient#textDocument_hover()<CR>
    nnoremap <buffer><silent>gd :call LanguageClient_textDocument_definition()<CR>

    "augroup LCHighlight
    "  autocmd!
    "  autocmd CursorHold,CursorHoldI * call LanguageClient#textDocument_documentHighlight()
    "augroup END
    "set updatetime=50

    augroup LanguageClient_config
      autocmd!
      autocmd User LanguageClientStarted setlocal signcolumn=yes
      autocmd User LanguageClientStopped setlocal signcolumn=auto
    augroup END
  endif
endfunction

autocmd FileType * call LC_maps()
nnoremap [Denite]c :Denite contextMenu<CR>
let g:LanguageClient_hasSnippetSupport = 0
'''
# }}}
