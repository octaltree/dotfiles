[[plugins]]
repo = 'tpope/vim-surround'
[[plugins]]
repo = 'vim-jp/vimdoc-ja'
[[plugins]]
repo = 'octaltree/linearf'
merged = 0
[[plugins]]
repo = 'octaltree/linearf-my-flavors'
[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
merged = 0

[[plugins]] # solarized {{{
repo = 'lifepillar/vim-solarized8'
hook_add='''
let g:solarized_termtrans=1
let g:solarized_extra_hi_groups = 1
autocmd VimEnter * nested colorscheme solarized8
autocmd ColorScheme * hi Folded guifg=#839496 guibg=None guisp=#002b36 gui=None cterm=None
autocmd ColorScheme * hi NormalFloat guibg=None
''' # }}}

[[plugins]] # nerdcommenter {{{
repo = 'preservim/nerdcommenter'
hook_add = '''
let g:loaded_nerd_comments = 1
function s:InitVariable(var, value)
    if !exists(a:var)
        execute 'let ' . a:var . ' = ' . string(a:value)
    endif
endfunction
call s:InitVariable('g:NERDAllowAnyVisualDelims', 1)
call s:InitVariable('g:NERDBlockComIgnoreEmpty', 0)
call s:InitVariable('g:NERDCommentWholeLinesInVMode', 0)
call s:InitVariable('g:NERDCommentEmptyLines', 0)
call s:InitVariable('g:NERDCompactSexyComs', 0)
call s:InitVariable('g:NERDCreateDefaultMappings', 1)
call s:InitVariable('g:NERDDefaultNesting', 1)
call s:InitVariable('g:NERDMenuMode', 3)
call s:InitVariable('g:NERDLPlace', '[>')
call s:InitVariable('g:NERDUsePlaceHolders', 1)
call s:InitVariable('g:NERDRemoveAltComs', 1)
call s:InitVariable('g:NERDRemoveExtraSpaces', 0)
call s:InitVariable('g:NERDRPlace', '<]')
call s:InitVariable('g:NERDSpaceDelims', 0)
call s:InitVariable('g:NERDDefaultAlign', 'none')
call s:InitVariable('g:NERDTrimTrailingWhitespace', 0)
call s:InitVariable('g:NERDToggleCheckAllLines', 0)
call s:InitVariable('g:NERDDisableTabsInBlockComm', 0)
call s:InitVariable('g:NERDSuppressWarnings', 0)

let g:NERDDefaultAlign = 'left'

function! s:CreateMaps(modes, target, desc, combo)
    " Build up a map command like
    " 'noremap <silent> <Plug>NERDCommenterComment :call nerdcommenter#Comment("n", "Comment")'
    let plug = '<Plug>NERDCommenter' . a:target
    let plug_start = 'noremap <silent> ' . plug . ' :call nerdcommenter#Comment("'
    let plug_end = '", "' . a:target . '")<CR>'
    " Build up a menu command like
    " 'menu <silent> comment.Comment<Tab>\\cc <Plug>NERDCommenterComment'
    let menuRoot = get(['', 'comment', '&comment', '&Plugin.&comment', '&Plugin.Nerd\ &Commenter'],
                \ g:NERDMenuMode, '')
    let menu_command = 'menu <silent> ' . menuRoot . '.' . escape(a:desc, ' ')
    if strlen(a:combo)
        let leader = exists('g:mapleader') ? g:mapleader : '\'
        let menu_command .= '<Tab>' . escape(leader, '\') . a:combo
    endif
    let menu_command .= ' ' . (strlen(a:combo) ? plug : a:target)
    " Execute the commands built above for each requested mode.
    for mode in (a:modes ==# '') ? [''] : split(a:modes, '\zs')
        if strlen(a:combo)
            execute mode . plug_start . mode . plug_end
            if g:NERDCreateDefaultMappings && !hasmapto(plug, mode)
                execute mode . 'map <leader>' . a:combo . ' ' . plug
            endif
        endif
        " Check if the user wants the menu to be displayed.
        if g:NERDMenuMode !=# 0
            execute mode . menu_command
        endif
    endfor
endfunction

call s:CreateMaps('nx', 'Toggle',     'Toggle', 'c<Space>')
''' # }}}

# cmp {{{
[[plugins]]
repo = 'hrsh7th/nvim-cmp'
[[plugins]]
repo = 'octaltree/cmp-look'
[[plugins]]
repo = 'hrsh7th/cmp-path'
[[plugins]]
repo = 'hrsh7th/cmp-vsnip'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp'
[[plugins]]
repo = 'hrsh7th/cmp-buffer'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lsp-signature-help'
[[plugins]]
repo = 'hrsh7th/cmp-nvim-lua'
[[plugins]]
repo = 'ray-x/cmp-treesitter'
[[plugins]]
repo = 'rafamadriz/friendly-snippets'
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
[[plugins]]
repo = 'hrsh7th/cmp-cmdline'
[[plugins]]
repo = 'andersevenrud/cmp-tmux'

# https://github.com/topics/nvim-cmp
# Array.from(document.querySelectorAll('article .f3 a.wb-break-word')).map(a => a.href)
# }}}

[[plugins]]
repo = 'machakann/vim-sandwich'
hook_add='''
let g:sandwich#recipes = deepcopy(g:sandwich#default_recipes)
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

# ddc {{{
[[plugins]]
repo = 'Shougo/ddc.vim'
hook_add='''
let sources = ['nvim-lsp', 'file', 'treesitter', 'around', 'tabnine', 'look']
call ddc#custom#patch_global('sources', sources)
call ddc#custom#patch_global('sourceOptions', {
      \ '_': {
      \   'matchers': ['matcher_head'],
      \   'sorters': ['sorter_rank']},
      \ 'file': {'mark': 'F', 'forceCompletionPattern': '/'},
      \ 'look': {'converters': ['loud', 'matcher_head'], 'matchers': [], 'mark': 'L', 'isVolatile': v:true, 'minAutoCompleteLength': 5},
      \ 'around': {'mark': 'A'},
      \ 'necovim': {'mark': 'V'},
      \ 'nvim-lsp': {'minAutoCompleteLength': 0},
      \ 'treesitter': {'mark': 'S'},
      \ 'tabnine': {'isVolatile': v:true, 'maxCandidates': 3, 'mark': 'TN', 'minAutoCompleteLength': 5}
      \ })
call ddc#custom#patch_filetype('vim', 'sources', ['necovim'] + sources)
call ddc#custom#patch_global('sourceParams', {
      \ 'look': {'convertCase': v:true}
      \ })
call ddc#custom#patch_filetype('rust', 'sourceOptions', {
      \ 'nvim-lsp': {'forceCompletionPattern': '(::|[. (])\w*'}
      \ })
call ddc#custom#patch_filetype(['c', 'c++'], 'sourceOptions', {
      \ 'nvim-lsp': {'forceCompletionPattern': '[. (]\w*'}
      \ })
call ddc#custom#patch_filetype('python', 'sourceOptions', {
      \ 'nvim-lsp': {'forceCompletionPattern': '[. (]\w*'}
      \ })
call ddc#custom#patch_filetype(['javascript', 'typescript'], 'sourceOptions', {
      \ 'nvim-lsp': {'forceCompletionPattern': '[. (]\w*'}
      \ })
call ddc#custom#patch_filetype('sh', 'sourceOptions', {
      \ 'nvim-lsp': {'forceCompletionPattern': '[ ]\w*'}
      \ })
"call ddc#custom#patch_global('completionMenu', 'pum.vim')
"inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
"inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
call ddc#enable()
'''
[[plugins]]
repo = 'Shougo/ddc-around'
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
[[plugins]]
repo = 'LumaKernel/ddc-file'
[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
[[plugins]]
repo = 'Shougo/pum.vim'
[[plugins]]
repo = 'delphinus/ddc-treesitter'
[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
# }}}

# vim: foldmethod=marker
