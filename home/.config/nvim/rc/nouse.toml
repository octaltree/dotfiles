#[[plugins]]
#repo = 'Shougo/Unite.vim'
#on_cmd = 'Unite'
#hook_add='''
#let g:unite_enable_start_insert = 1
#'''
# web
[[plugins]]
repo  = 'othree/html5.vim'
on_ft = 'html'
#[[plugins]] # fold用syntaxあるけど重い
#repo  = 'othree/yajs.vim'
#on_ft = 'javascript'
[[plugins]]
repo = 'billyvg/tigris.nvim'
on_ft = 'javascript'
hook_post_update = '''
let g:dein#plugin.build = './install.sh'
'''
hook_source='''
let g:tigris#enabled = 1
let g:tigris#on_the_fly_enabled = 1
let g:tigris#delay = 300
'''
[[plugins]]
repo = 'MaxMEllon/vim-jsx-pretty'
on_ft = ['javascript', 'javascriptreact']
# toml
[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'
# markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
'''
# Tex
[[plugins]]
repo = 'poppyschmo/deoplete-latex'
on_ft = ['tex', 'latex']
# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add='''
let g:rustfmt_autosave = 1
set foldmethod=syntax
let g:rust_fold=1
'''
#[[plugins]]
#repo = 'racer-rust/vim-racer'
#on_ft = 'rust'
#hook_add='''
#let g:racer_experimental_completer = 1
#nmap gd <Plug>(rust-def)
#'''
[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_add='''
let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
"nnoremap <silent><space>s :<c-u>Unite rust/doc<CR>
nnoremap <silent><space>s :<c-u>Denite rust/doc<CR>
'''
#[[plugins]]
#repo = 'octaltree/rust-doc.vim'
#on_ft = 'rust'
#hook_add='''
#let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
#nnoremap <silent><space>s :<c-u>Denite rust/doc<CR>
#'''
# C/ C++
[[plugins]]
repo = 'https://github.com/zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/include/clang'
'''

[[plugins]]
repo = 'https://github.com/rupurt/vim-mql5'
on_ft = ['mql5', 'cpp']

# firenvim {{{
[[plugins]]
repo = 'glacambre/firenvim'
hook_post_update='''
call firenvim#install(0)
'''
hook_add='''
let g:firenvim_config = {
    \ 'localSettings': {
        \ '.*': {
            \ 'selector': 'textarea, div[role="textbox"]',
            \ 'priority': 0,
        \ }
    \ }
\ }
augroup Firenvim
  au BufEnter play.golang.org_*.txt setlocal filetype=go
  au BufEnter play.rust-lang.org_*.txt setlocal filetype=rust
  au BufEnter github.com_*.txt setlocal filetype=markdown
  au BufEnter localhost*ipynb*.txt setlocal filetype=python
augroup END
'''
# }}}


[[plugins]] # vimproc {{{
repo = 'Shougo/vimproc.vim'
build = 'make'
# }}}

[[plugins]] # quickrun {{{
repo = 'thinca/vim-quickrun'
depends = 'shougo/vimproc.vim'
hook_add='''
let g:quickrun_no_default_key_mappings = 1
nnoremap <silent>sd :w<cr>:QuickRun<cr>
nnoremap <silent>sc :<C-u>bw! \[quickrun\ output\]<CR>

let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_config._ = {
      \ 'runner'    : 'vimproc',
      \ 'runner/vimproc/updatetime' : 60,
      \ 'outputter' : 'error',
      \ 'outputter/error/success' : 'buffer',
      \ 'outputter/error/error'   : 'quickfix',
      \ 'outputter/buffer/split'  : ':rightbelow 8sp',
      \ 'outputter/buffer/close_on_empty' : 1,
      \ }
''' # }}}


#[[plugins]] # languageclient {{{
#repo = 'autozimu/LanguageClient-neovim'
#build = './install.sh'
#hook_add = '''
#set hidden
#let g:LanguageClient_loggingFile = '/tmp/languageclient.log'
#  let g:LanguageClient_serverCommands = {}
#if executable('clangd')
#  let g:LanguageClient_serverCommands['c'] = ['clangd']
#  let g:LanguageClient_serverCommands['cpp'] = ['clangd']
#endif
#if executable('pyls')
#  let g:LanguageClient_serverCommands['python'] = ['pyls']
#endif
#if executable('stack')
#  let g:LanguageClient_serverCommands['haskell'] = ['stack', 'exec', 'hie', '--', '--lsp']
#endif
#if executable('rls')
#  let g:LanguageClient_serverCommands['rust'] = ['rls']
#endif
#if executable('purescript-language-server')
#  let g:LanguageClient_serverCommands['purescript'] = ['purescript-language-server', '--stdio']
#endif
#
#function LC_maps()
#  if has_key(g:LanguageClient_serverCommands, &filetype)
#    " any keybindings you want, such as ...
#    nnoremap <buffer><silent>K :call LanguageClient#textDocument_hover()<CR>
#    nnoremap <buffer><silent>gd :call LanguageClient_textDocument_definition()<CR>
#
#    "augroup LCHighlight
#    "  autocmd!
#    "  autocmd CursorHold,CursorHoldI * call LanguageClient#textDocument_documentHighlight()
#    "augroup END
#    "set updatetime=50
#
#    augroup LanguageClient_config
#      autocmd!
#      autocmd User LanguageClientStarted setlocal signcolumn=yes
#      autocmd User LanguageClientStopped setlocal signcolumn=auto
#    augroup END
#  endif
#endfunction
#
#autocmd FileType * call LC_maps()
#nnoremap [Denite]c :Denite contextMenu<CR>
#let g:LanguageClient_hasSnippetSupport = 0
#''' # }}}


[[plugins]] # neosnippet {{{
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_add='''
imap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
smap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
nmap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
xmap <silent><expr> <tab> neosnippet#expandable()? "\<Plug>(neosnippet_expand_target)": "\<tab>"
"let g:neosnippet#enable_complete_done = 1
'''
# }}}

#[[plugins]] # polyglot {{{
#repo = 'sheerun/vim-polyglot'
#hook_add='''
#let g:polyglot_disabled = ['csv', 'markdown']
#''' # }}}


[[plugins]] # deoplete source {{{
repo = 'ujihisa/neco-look'
depends = ['deoplete.nvim']
on_event = 'InsertEnter'
hook_source = '''
call deoplete#custom#source('look', 'min_pattern_length', 7)
'''

#[[plugins]] # deoplete {{{
#repo = 'Shougo/deoplete.nvim'
#depends = 'context_filetype.vim'
#on_event = 'InsertEnter'
#hook_add = '''
#let g:deoplete#enable_at_startup = 1
#set completeopt+=noselect
#"set completeopt-=preview

#autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
#call deoplete#custom#option('auto_refresh_delay', 1)
#call deoplete#custom#option('min_pattern_length', 1)
#call deoplete#custom#option('max_list', 15)

#inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
#inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
#imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#function! s:my_cr_function() abort
#  return deoplete#close_popup() . "\<CR>"
#endfunction
#"let g:cache_completed = {}
#"function! s:my_cr_function() abort
#"  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
#"    let g:cache_completed = v:completed_item
#"    return deoplete#close_popup()
#"  else
#"    return deoplete#close_popup() . "\<CR>"
#"  endif
#"endfunction
#"imap <silent><expr> <cr> neosnippet#expandable_or_jumpable()?
#"  \ "\<Plug>(neosnippet_expand_or_jump)":
#"  \ deoplete#close_popup() . "\<CR>"
#call deoplete#custom#source('lsp', 'min_pattern_length', 0)
#call deoplete#custom#source('lsp', 'input_patterns', {
#    \ 'rust': '(::|[. (])\w*',
#    \ 'c': '[. (]\w*',
#    \ 'c++': '[. (]\w*',
#    \ 'sh': '[ ]\w*',
#    \ 'python': '[. (]\w*',
#    \ })
#''' # }}}
# }}}


[[plugins]]
repo = 'Shougo/deoplete-lsp'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex']
hook_add='''
let g:deoplete#lsp#use_icons_for_candidates = v:true
'''

[[plugins]]
repo = 'altercation/vim-colors-solarized'
hook_add='''
  colorscheme solarized
  let g:solarized_visibility="low"
  let g:solarized_termcolors=256
'''

[[plugins]] # vimproc {{{
repo = 'Shougo/vimproc.vim'
build = 'make'
# }}}

#[[plugins]] # deoplete {{{
#repo = 'Shougo/deoplete.nvim'
#depends = 'context_filetype.vim'
#on_event = 'InsertEnter'
#hook_add = '''
#let g:deoplete#enable_at_startup = 1
#set completeopt+=noselect
#"set completeopt-=preview
#
#autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
#call deoplete#custom#option('auto_refresh_delay', 1)
#call deoplete#custom#option('min_pattern_length', 1)
#
#inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
#inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
#imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
#function! s:my_cr_function() abort
#  return deoplete#close_popup() . "\<CR>"
#endfunction
#"let g:cache_completed = {}
#"function! s:my_cr_function() abort
#"  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
#"    let g:cache_completed = v:completed_item
#"    return deoplete#close_popup()
#"  else
#"    return deoplete#close_popup() . "\<CR>"
#"  endif
#"endfunction
#"imap <silent><expr> <cr> neosnippet#expandable_or_jumpable()?
#"  \ "\<Plug>(neosnippet_expand_or_jump)":
#"  \ deoplete#close_popup() . "\<CR>"
#''' # }}}

#[[plugins]] # deoplete source {{{
#repo = 'ujihisa/neco-look'
#depends = ['deoplete.nvim']
#on_event = 'InsertEnter'
#hook_source = '''
#call deoplete#custom#source('look', 'min_pattern_length', 7)
#'''
## }}}

#[[plugins]]
#repo = 'Shougo/deoplete-lsp'
#on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex', 'javascript', 'typescript']
#hook_add='''
#let g:deoplete#lsp#use_icons_for_candidates = v:true
#'''

"call deoplete#custom#source('lsp', 'min_pattern_length', 0)
"call deoplete#custom#source('lsp', 'input_patterns', {
"    \ 'rust': '(::|[. (])\w*',
"    \ 'c': '[. (]\w*',
"    \ 'c++': '[. (]\w*',
"    \ 'sh': '[ ]\w*',
"    \ 'python': '[. (]\w*',
"    \ })

[[plugins]] # denite {{{
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_add = '''
  nnoremap [Denite] <Nop>
  nmap <silent><space> [Denite]
  nnoremap [Denite]f :<c-u>Denite file/rec<CR>
  nnoremap [Denite]o :<c-u>Denite file/old<CR>
  nnoremap [Denite]/ :<c-u>Denite line<CR>
  nnoremap [Denite]g :<c-u>Denite grep<CR>
  nnoremap [Denite]r :<c-u>Denite -resume<CR>
  nnoremap [Denite]<space> :Denite source<CR>
  nnoremap [Denite]t :Denite buffer -default-action=tabswitch<CR>
  nnoremap [Denite]d :Denite lsp_references<CR>
  nnoremap [Denite]c/ :<c-u>DeniteCursorWord line<CR>
  nnoremap [Denite]cg :<c-u>DeniteCursorWord grep<CR>

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <cr>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> t
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr><nowait> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <space>
    \ denite#do_map('toggle_select')
  endfunction
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <ESC> <Plug>(denite_filter_update)
    imap <silent><buffer> <CR> <ESC><CR>
  endfunction
'''
hook_source='''
  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.9
  call denite#custom#option('default', {
      \ 'split': 'horizontal',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'prompt': '> ',
      \ })
  call denite#custom#kind('file', 'default_action', 'switch')

  if executable("ag")
    call denite#custom#var('file/rec', 'command',
        \ ['ag', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
  if executable("rg")
    call denite#custom#var('file/rec', 'command',
        \ ['rg', '--hidden', '--follow', '--files', '-g', '!.git'])
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--no-heading', '--vimgrep', '-g', '!.git'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
'''
[[plugins]]
repo = 'liuchengxu/vim-clap'
on_cmd = 'Denite'
depends = ['denite.nvim']
build='make'
hook_source='''
call denite#custom#filter('matcher/clap', 'clap_path', expand('~/.config/nvim/dein/repos/github.com/liuchengxu/vim-clap'))
call denite#custom#source('_', 'matcher', ['matcher/clap'])
'''
[[plugins]]
repo = 'octaltree/rustdoc-index'
on_cmd = 'Denite'
depends = ['denite.nvim']
build = 'make denite'
hook_add = '''
nnoremap <silent><space>s :<c-u>Denite rustdoc-index<CR>
'''
# }}}

[[plugins]] # w3m {{{
repo = 'yuratomo/w3m.vim'
on_cmd = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVSplit']
hook_add='''
let g:w3m#external_browser = 'firefox'
let g:w3m#homepage = "http://www.google.co.jp/"
let g:w3m#lang = 'ja_JP'
let g:w3m#search_engine = 'http://www.google.com/search?ie=' . &encoding . '&q=%s'
let g:w3m#disable_vimproc = 1
au Filetype w3m setlocal foldnestmax=0
au Filetype w3m nmap <buffer><c-o> <Plug>(w3m-back)
''' # }}}

[[plugins]] # echodoc {{{
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
let g:echodoc#use_nvim_lsp = v:true
call echodoc#enable()
''' # }}}
