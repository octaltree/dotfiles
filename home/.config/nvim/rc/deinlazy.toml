[[plugins]]
repo = 'Shougo/Unite.vim'
on_cmd = 'Unite'
hook_add='''
let g:unite_enable_start_insert = 1
'''
[[plugins]]
repo = 'koron/codic-vim'
on_cmd = 'Codic'
# web
[[plugins]]
repo  = 'othree/html5.vim'
on_ft = 'html'
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
'''
# vim
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# toml
[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'
# markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
'''
# Haskell
[[plugins]]
repo = 'eagletmt/ghcmod-vim'
on_ft = 'haskell'
hook_add = '''
nnoremap ght :<c-u>w<CR>:<c-u>GhcModType<CR>
nnoremap gh[ :<c-u>GhcModTypeClear<CR>
nnoremap <silent>ghc :<c-u>w<CR>:<c-u>GhcModCheckAndLintAsync<CR>
'''
[[plugins]]
repo = 'eagletmt/neco-ghc'
on_ft = 'haskell'
hook_add = '''
let g:haskellmode_completion_ghc = 0
let g:necoghc_enable_detailed_browse = 1
autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
'''
[[plugins]]
repo = 'nbouscal/vim-stylish-haskell'
on_ft = 'haskell'
[[plugins]]
repo = 'Twinside/vim-hoogle'
on_ft = 'haskell'
# Tex
[[plugins]]
repo = 'poppyschmo/deoplete-latex'
on_ft = ['tex', 'latex']
# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add='''
let g:rustfmt_autosave = 1
set foldmethod=syntax
let g:rust_fold=1
'''
[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_add='''
let g:racer_experimental_completer = 1
nmap gd <Plug>(rust-def)
'''
[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_add='''
let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
nnoremap <silent><space>s :<c-u>Unite rust/doc<CR>
'''
# C/ C++
[[plugins]]
repo = 'https://github.com/zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/include/clang'
'''
