[[plugins]] # deoplete source {{{
repo = 'ujihisa/neco-look'
depends = ['deoplete.nvim']
on_event = 'InsertEnter'
hook_source = '''
call deoplete#custom#source('look', 'min_pattern_length', 7)
'''
# }}}

[[plugins]] # snippet {{{
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['deoplete.nvim']
[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_event = 'InsertEnter'
depends = ['vim-vsnip']
# }}}

[[plugins]] # echodoc {{{
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
let g:echodoc#use_nvim_lsp = v:true
call echodoc#enable()
''' # }}}

[[plugins]] # winresizer {{{
repo = 'simeji/winresizer'
on_cmd = 'WinResizerStartResize' # }}}

[[plugins]] # sudo {{{
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
let g:suda_smart_edit = 0
''' # }}}

[[plugins]] # markdown {{{
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
''' # }}}

[[plugins]] # web {{{
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty', 'javascript']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty,javascript EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
''' # }}}

[[plugins]] # vim {{{
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}

[[plugins]] # rust {{{
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add='''
let g:rustfmt_autosave = 1
''' # }}}

[[plugins]] # w3m {{{
repo = 'yuratomo/w3m.vim'
on_cmd = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVSplit']
hook_add='''
let g:w3m#external_browser = 'firefox'
let g:w3m#homepage = "http://www.google.co.jp/"
let g:w3m#lang = 'ja_JP'
let g:w3m#search_engine = 'http://www.google.com/search?ie=' . &encoding . '&q=%s'
au Filetype w3m setlocal foldnestmax=0
au Filetype w3m nmap <buffer><c-o> <Plug>(w3m-back)
''' # }}}

[[plugins]] # prettyprint {{{
repo = 'thinca/vim-prettyprint'
on_cmd = 'PP' # }}}

 # lsp {{{
[[plugins]]
repo = 'https://github.com/nvim-lua/lsp_extensions.nvim'
on_ft = ['rust']
hook_source = '''
if executable('rust-analyzer')
  autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
    \ lua require'lsp_extensions'.inlay_hints{
      \ prefix = ' Â» ', highlight = "Comment", only_current_line = false, enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }
endif
'''
[[plugins]]
repo = 'Shougo/deoplete-lsp'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex', 'javascript', 'typescript']
hook_add='''
let g:deoplete#lsp#use_icons_for_candidates = v:true
'''
[[plugins]]
repo = 'weilbith/nvim-lsp-denite'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex', 'javascript', 'typescript']
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex', 'javascript', 'typescript']
hook_source = '''
function LC_maps()
  nnoremap <silent><buffer><c-]> :lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent><buffer>gd    :lua vim.lsp.buf.definition()<CR>
  nnoremap <silent><buffer>K     :lua vim.lsp.buf.hover()<CR>
  nnoremap <silent><buffer>gD    :lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent><buffer><c-k> :lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent><buffer>1gD   :lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent><buffer>gr    :lua vim.lsp.buf.references()<CR>
  nnoremap <silent><buffer>g0    :lua vim.lsp.buf.document_symbol()<CR>
  nnoremap <silent><buffer>gW    :lua vim.lsp.buf.workspace_symbol()<CR>
  nnoremap <silent><buffer>ss    :lua vim.lsp.buf.formatting()<cr>
  nnoremap <silent>ga    <cmd>lua vim.lsp.buf.code_action()<CR>
  setlocal signcolumn=yes
endfunction
call LC_maps()

if executable('rust-analyzer')
  lua local capabilities = vim.lsp.protocol.make_client_capabilities();
    \ capabilities.textDocument.completion.completionItem.resolveSupport = {
    \   properties = {
    \     'documentation',
    \     'detail',
    \     'additionalTextEdits',
    \   }
    \ };
    \ require'lspconfig'.rust_analyzer.setup{
    \   capabilities = capabilities,
    \   settings = {
    \     ["rust-analyzer"] = {
    \       procMacro = { enable = true },
    \       lruCapacity = 512
    \     }
    \   }
    \ }
  autocmd FileType rust call LC_maps()
endif
if executable('clangd')
  lua require'lspconfig'.clangd.setup{}
  autocmd FileType c call LC_maps()
  autocmd FileType cpp call LC_maps()
endif
if executable('bash-language-server')
  lua require'lspconfig'.bashls.setup{}
  autocmd FileType sh call LC_maps()
endif
if executable('pyls')
  lua require'lspconfig'.pyls.setup{}
  autocmd FileType python call LC_maps()
endif
if executable('deno')
  lua require'lspconfig'.denols.setup{}
  autocmd FileType javascript call LC_maps()
  autocmd FileType typescript call LC_maps()
elseif executable('typescript-language-server')
  lua require'lspconfig'.tsserver.setup{}
  autocmd FileType javascript call LC_maps()
  autocmd FileType typescript call LC_maps()
endif
if executable('texlab')
  lua require'lspconfig'.texlab.setup{}
  autocmd FileType tex call LC_maps()
endif
call deoplete#custom#source('lsp', 'min_pattern_length', 0)
call deoplete#custom#source('lsp', 'input_patterns', {
    \ 'rust': '(::|[. (])\w*',
    \ 'c': '[. (]\w*',
    \ 'c++': '[. (]\w*',
    \ 'sh': '[ ]\w*',
    \ 'python': '[. (]\w*',
    \ })
''' # }}}

# vim: foldmethod=marker
