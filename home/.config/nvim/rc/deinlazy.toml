[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
set completeopt+=noselect
set completeopt-=preview
"let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1
inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"let g:cache_completed = {}
"function! s:my_cr_function() abort
"  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
"    let g:cache_completed = v:completed_item
"    return deoplete#close_popup()
"  else
"    return deoplete#close_popup() . "\<CR>"
"  endif
"endfunction
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
"imap <silent><expr> <cr> neosnippet#expandable_or_jumpable()?
"  \ "\<Plug>(neosnippet_expand_or_jump)":
"  \ deoplete#close_popup() . "\<CR>"
call deoplete#enable()
'''
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'virtual'
call echodoc#enable()
'''

#[[plugins]]
#repo = 'Shougo/Unite.vim'
#on_cmd = 'Unite'
#hook_add='''
#let g:unite_enable_start_insert = 1
#'''
# web
[[plugins]]
repo  = 'othree/html5.vim'
on_ft = 'html'
#[[plugins]] # fold用syntaxあるけど重い
#repo  = 'othree/yajs.vim'
#on_ft = 'javascript'
[[plugins]]
repo = 'billyvg/tigris.nvim'
on_ft = 'javascript'
hook_post_update = '''
let g:dein#plugin.build = './install.sh'
'''
hook_source='''
let g:tigris#enabled = 1
let g:tigris#on_the_fly_enabled = 1
let g:tigris#delay = 300
'''
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty', 'javascript']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
'''
# vim
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# toml
[[plugins]]
repo  = 'cespare/vim-toml'
on_ft = 'toml'
# markdown
[[plugins]]
repo = 'rcmdnk/vim-markdown'
on_ft = ['markdown','mkd']
hook_add = '''
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_math = 1
'''
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
'''
# Tex
[[plugins]]
repo = 'poppyschmo/deoplete-latex'
on_ft = ['tex', 'latex']
# Rust
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add='''
let g:rustfmt_autosave = 1
set foldmethod=syntax
let g:rust_fold=1
'''
#[[plugins]]
#repo = 'racer-rust/vim-racer'
#on_ft = 'rust'
#hook_add='''
#let g:racer_experimental_completer = 1
#nmap gd <Plug>(rust-def)
#'''
[[plugins]]
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_add='''
let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
"nnoremap <silent><space>s :<c-u>Unite rust/doc<CR>
nnoremap <silent><space>s :<c-u>Denite rust/doc<CR>
'''
#[[plugins]]
#repo = 'octaltree/rust-doc.vim'
#on_ft = 'rust'
#hook_add='''
#let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
#nnoremap <silent><space>s :<c-u>Denite rust/doc<CR>
#'''
# C/ C++
[[plugins]]
repo = 'https://github.com/zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '/usr/lib/libclang.so'
let g:deoplete#sources#clang#clang_header = '/usr/include/clang'
'''

[[plugins]]
repo = 'https://github.com/rupurt/vim-mql5'
on_ft = ['mq5', 'mql5']
