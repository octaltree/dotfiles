[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
call echodoc#enable()
'''

[[plugins]]
repo = 'simeji/winresizer'
on_cmd = 'WinResizerStartResize'

[[plugins]] # neosnippet {{{
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_add='''
imap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
smap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
nmap <silent><expr> <tab> neosnippet#expandable_or_jumpable()? "\<Plug>(neosnippet_expand_or_jump)": "\<tab>"
xmap <silent><expr> <tab> neosnippet#expandable()? "\<Plug>(neosnippet_expand_target)": "\<tab>"
"let g:neosnippet#enable_complete_done = 1
'''
# }}}

[[plugins]] # sudo {{{
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
let g:suda_smart_edit = 1
''' # }}}

[[plugins]] # markdown {{{
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
''' # }}}

[[plugins]] # web {{{
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty', 'javascript']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty,javascript EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
''' # }}}

[[plugins]] # vim {{{
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}

[[plugins]] # rust {{{
repo = 'rhysd/rust-doc.vim'
on_ft = 'rust'
hook_add='''
let g:rust_doc#downloaded_rust_doc_dir = '$HOME/.rustup/toolchains/stable-*'
nnoremap <silent><space>s :<c-u>Denite rust/doc<CR>
let g:rust_doc#define_map_K = 0
set colorcolumn=100
'''

#[[plugins]]
#repo = 'rust-lang/rust.vim'
#on_ft = 'rust'
#hook_add='''
#let g:rustfmt_autosave = 1
#nnoremap sm :<c-u>w<CR>:make build<CR><CR>
#''' # }}}

[[plugins]] # w3m {{{
repo = 'yuratomo/w3m.vim'
depends = 'Shougo/vimproc.vim'
on_cmd = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVSplit']
hook_add='''
let g:w3m#external_browser = 'firefox'
let g:w3m#homepage = "http://www.google.co.jp/"
let g:w3m#lang = 'ja_JP'
let g:w3m#search_engine = 'http://www.google.com/search?ie=' . &encoding . '&q=%s'
au Filetype w3m setlocal foldnestmax=0
au Filetype w3m nmap <buffer><c-o> <Plug>(w3m-back)
''' # }}}

[[plugins]] # lsp {{{
repo = 'neovim/nvim-lspconfig'
on_ft = ['rust', 'c', 'c++', 'sh', 'html', 'python', 'tex']
hook_source = '''
set signcolumn=yes
augroup auto_style
  autocmd!
  autocmd bufWritePost *.rs :lua vim.lsp.buf.formatting()
augroup END

if executable('rls')
  lua require'nvim_lsp'.rls.setup{
    \settings = {rust = {clippy_preference = "on" } } }
endif
if executable('clangd')
  lua require'nvim_lsp'.clangd.setup{}
endif
if executable('bash-language-server')
  lua require'nvim_lsp'.bashls.setup{}
endif
if executable('html-languageserver')
  lua require'nvim_lsp'.html.setup{}
endif
if executable('pyls')
  lua require'nvim_lsp'.pyls.setup{}
endif
if executable('texlab')
  lua require'nvim_lsp'.texlab.setup{}
endif
call deoplete#custom#source('lsp', 'min_pattern_length', 0)
call deoplete#custom#source('lsp', 'input_patterns', {
    \ 'rust': '(::|[. (])\w*',
    \ 'c': '[. (]\w*',
    \ 'c++': '[. (]\w*',
    \ 'sh': '[ ]\w*',
    \ 'python': '[. (]\w*',
    \ })
nnoremap <silent><buffer><c-]> :lua vim.lsp.buf.declaration()<CR>
nnoremap <silent><buffer>gd    :lua vim.lsp.buf.definition()<CR>
nnoremap <silent><buffer>K     :lua vim.lsp.buf.hover()<CR>
nnoremap <silent><buffer>gD    :lua vim.lsp.buf.implementation()<CR>
nnoremap <silent><buffer><c-k> :lua vim.lsp.buf.signature_help()<CR>
nnoremap <silent><buffer>1gD   :lua vim.lsp.buf.type_definition()<CR>
nnoremap <silent><buffer>gr    :lua vim.lsp.buf.references()<CR>
nnoremap <silent><buffer>g0    :lua vim.lsp.buf.document_symbol()<CR>
nnoremap <silent><buffer>gW    :lua vim.lsp.buf.workspace_symbol()<CR>
nnoremap <silent><buffer>ss    :lua vim.lsp.buf.formatting()<cr>
''' # }}}

# vim: foldmethod=marker
