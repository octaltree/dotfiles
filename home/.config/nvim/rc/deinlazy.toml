[[plugins]] # denite {{{
repo = 'Shougo/denite.nvim'
on_cmd = ["Denite", "DeniteCursorWord"]
hook_add = '''
  nnoremap [Denite] <Nop>
  nmap <silent><space> [Denite]
  nnoremap [Denite]f :<c-u>Denite file/rec<CR>
  nnoremap [Denite]o :<c-u>Denite file/old<CR>
  nnoremap [Denite]/ :<c-u>Denite line<CR>
  nnoremap [Denite]g :<c-u>Denite grep<CR>
  nnoremap [Denite]r :<c-u>Denite -resume<CR>
  nnoremap [Denite]<space> :Denite source<CR>
  nnoremap [Denite]t :Denite buffer -default-action=tabswitch<CR>
  nnoremap [Denite]d :Denite lsp_references<CR>
'''
hook_source='''
  let s:denite_win_width_percent = 0.9
  let s:denite_win_height_percent = 0.9
  call denite#custom#option('default', {
      \ 'auto-resize': 'true',
      \ 'split': 'floating',
      \ 'winwidth': float2nr(&columns * s:denite_win_width_percent),
      \ 'wincol': float2nr((&columns - (&columns * s:denite_win_width_percent)) / 2),
      \ 'winheight': float2nr(&lines * s:denite_win_height_percent),
      \ 'winrow': float2nr((&lines - (&lines * s:denite_win_height_percent)) / 2),
      \ 'prompt': '> ',
      \ })
  call denite#custom#kind('file', 'default_action', 'switch')

  autocmd FileType denite call s:denite_my_settings()
  function! s:denite_my_settings() abort
    nnoremap <silent><buffer><expr> <cr>
    \ denite#do_map('do_action')
    nnoremap <silent><buffer><expr> s
    \ denite#do_map('do_action', 'split')
    nnoremap <silent><buffer><expr> v
    \ denite#do_map('do_action', 'vsplit')
    nnoremap <silent><buffer><expr> t
    \ denite#do_map('do_action', 'tabopen')
    nnoremap <silent><buffer><expr> p
    \ denite#do_map('do_action', 'preview')
    nnoremap <silent><buffer><expr><nowait> q
    \ denite#do_map('quit')
    nnoremap <silent><buffer><expr> i
    \ denite#do_map('open_filter_buffer')
    nnoremap <silent><buffer><expr> <space>
    \ denite#do_map('toggle_select')
  endfunction
  autocmd FileType denite-filter call s:denite_filter_my_settings()
  function! s:denite_filter_my_settings() abort
    imap <silent><buffer> <ESC> <Plug>(denite_filter_update)
    imap <silent><buffer> <CR> <ESC><CR>
  endfunction

  if executable("ag")
    call denite#custom#var('file/rec', 'command',
        \ ['ag', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--vimgrep'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
  if executable("rg")
    call denite#custom#var('file/rec', 'command',
        \ ['rg', '--hidden', '--follow', '--files', '-g', '!.git'])
    call denite#custom#var('grep', 'command', ['rg'])
    call denite#custom#var('grep', 'default_opts',
        \ ['--hidden', '--follow', '-S', '--no-heading', '--vimgrep', '-g', '!.git'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'separator', ['--'])
    call denite#custom#var('grep', 'final_opts', [])
  endif
''' # }}}

[[plugins]] # deoplete {{{
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_add = '''
let g:deoplete#enable_at_startup = 1
set completeopt+=noselect
"set completeopt-=preview
'''
hook_source = '''
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | silent! pclose | endif
call deoplete#custom#option('auto_refresh_delay', 1)
call deoplete#custom#option('min_pattern_length', 1)

inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
"let g:cache_completed = {}
"function! s:my_cr_function() abort
"  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
"    let g:cache_completed = v:completed_item
"    return deoplete#close_popup()
"  else
"    return deoplete#close_popup() . "\<CR>"
"  endif
"endfunction
"imap <silent><expr> <cr> neosnippet#expandable_or_jumpable()?
"  \ "\<Plug>(neosnippet_expand_or_jump)":
"  \ deoplete#close_popup() . "\<CR>"
'''
[[plugins]]
repo = 'ujihisa/neco-look'
depends = ['deoplete.nvim']
on_event = 'InsertEnter'
hook_source = '''
call deoplete#custom#source('look', 'min_pattern_length', 7)
'''
# }}}

[[plugins]] # snippet {{{
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['deoplete.nvim']
hook_add='''
"imap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
"smap <expr> <C-j>   vsnip#expandable()  ? '<Plug>(vsnip-expand)'         : '<C-j>'
"imap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'
"smap <expr> <Tab>   vsnip#jumpable(1)   ? '<Plug>(vsnip-jump-next)'      : '<Tab>'

imap <expr> <C-i>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-i>'
smap <expr> <C-i>   vsnip#available(1)  ? '<Plug>(vsnip-expand-or-jump)' : '<C-i>'
imap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
smap <expr> <S-Tab> vsnip#jumpable(-1)  ? '<Plug>(vsnip-jump-prev)'      : '<S-Tab>'
'''
#[[plugins]]
#repo = 'rafamadriz/friendly-snippets'
#on_event = 'InsertEnter'
#depends = ['vim-vsnip']
[[plugins]]
repo= 'hrsh7th/vim-vsnip-integ'
on_event = 'InsertEnter'
depends = ['deoplete-lsp']
# }}}

[[plugins]] # echodoc {{{
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
call echodoc#enable()
''' # }}}

[[plugins]] # winresizer {{{
repo = 'simeji/winresizer'
on_cmd = 'WinResizerStartResize' # }}}

[[plugins]] # sudo {{{
repo = 'lambdalisue/suda.vim'
on_event = 'BufRead'
hook_add = '''
let g:suda_smart_edit = 1
''' # }}}

[[plugins]] # markdown {{{
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
''' # }}}

[[plugins]] # web {{{
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty', 'javascript']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty,javascript EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
''' # }}}

[[plugins]] # vim {{{
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}

[[plugins]] # rust {{{
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_add='''
let g:rustfmt_autosave = 1

autocmd FileType rust setlocal colorcolumn=100
inoremap <c-f> ::
''' # }}}

[[plugins]] # w3m {{{
repo = 'yuratomo/w3m.vim'
on_cmd = ['W3m', 'W3mTab', 'W3mSplit', 'W3mVSplit']
hook_add='''
let g:w3m#external_browser = 'firefox'
let g:w3m#homepage = "http://www.google.co.jp/"
let g:w3m#lang = 'ja_JP'
let g:w3m#search_engine = 'http://www.google.com/search?ie=' . &encoding . '&q=%s'
au Filetype w3m setlocal foldnestmax=0
au Filetype w3m nmap <buffer><c-o> <Plug>(w3m-back)
''' # }}}

 # lsp {{{
[[plugins]]
repo = 'https://github.com/nvim-lua/lsp_extensions.nvim'
on_ft = ['rust']
hook_source = '''
if executable('rust-analyzer')
  autocmd CursorMoved,InsertLeave,BufEnter,BufWinEnter,TabEnter,BufWritePost *
    \ lua require'lsp_extensions'.inlay_hints{
      \ prefix = ' Â» ', highlight = "Comment", only_current_line = false, enabled = {"TypeHint", "ChainingHint", "ParameterHint"} }
endif
'''
[[plugins]]
repo = 'Shougo/deoplete-lsp'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex']
hook_add='''
let g:deoplete#lsp#use_icons_for_candidates = v:true
'''
[[plugins]]
repo = 'weilbith/nvim-lsp-denite'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex']
[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_ft = ['rust', 'c', 'cpp', 'sh', 'python', 'tex']
hook_source = '''
"augroup auto_style
"  autocmd!
"  autocmd bufWritePost *.rs :lua vim.lsp.buf.formatting()
"augroup END

function LC_maps()
  nnoremap <silent><buffer><c-]> :lua vim.lsp.buf.declaration()<CR>
  nnoremap <silent><buffer>gd    :lua vim.lsp.buf.definition()<CR>
  nnoremap <silent><buffer>K     :lua vim.lsp.buf.hover()<CR>
  nnoremap <silent><buffer>gD    :lua vim.lsp.buf.implementation()<CR>
  nnoremap <silent><buffer><c-k> :lua vim.lsp.buf.signature_help()<CR>
  nnoremap <silent><buffer>1gD   :lua vim.lsp.buf.type_definition()<CR>
  nnoremap <silent><buffer>gr    :lua vim.lsp.buf.references()<CR>
  nnoremap <silent><buffer>g0    :lua vim.lsp.buf.document_symbol()<CR>
  nnoremap <silent><buffer>gW    :lua vim.lsp.buf.workspace_symbol()<CR>
  nnoremap <silent><buffer>ss    :lua vim.lsp.buf.formatting()<cr>
  nnoremap <silent>ga    <cmd>lua vim.lsp.buf.code_action()<CR>
  setlocal signcolumn=yes
endfunction
call LC_maps()

"if executable('rls')
"  lua require'lspconfig'.rls.setup{
"    \settings = {rust = {clippy_preference = "on" } } }
"  autocmd FileType rust call LC_maps()
"endif
if executable('rust-analyzer')
  lua require'lspconfig'.rust_analyzer.setup{
    \settings = {
    \  ["rust-analyzer"] = {
    \    procMacro = {
    \      enable = true
    \    }
    \  }
    \}
    \}
  autocmd FileType rust call LC_maps()
endif
if executable('clangd')
  lua require'lspconfig'.clangd.setup{}
  autocmd FileType c call LC_maps()
  autocmd FileType cpp call LC_maps()
endif
if executable('bash-language-server')
  lua require'lspconfig'.bashls.setup{}
  autocmd FileType sh call LC_maps()
endif
"if executable('html-languageserver')
"  lua require'lspconfig'.html.setup{}
"  autocmd FileType html call LC_maps()
"endif
if executable('pyls')
  lua require'lspconfig'.pyls.setup{}
  autocmd FileType python call LC_maps()
endif
if executable('texlab')
  lua require'lspconfig'.texlab.setup{}
  autocmd FileType tex call LC_maps()
endif
call deoplete#custom#source('lsp', 'min_pattern_length', 0)
call deoplete#custom#source('lsp', 'input_patterns', {
    \ 'rust': '(::|[. (])\w*',
    \ 'c': '[. (]\w*',
    \ 'c++': '[. (]\w*',
    \ 'sh': '[ ]\w*',
    \ 'python': '[. (]\w*',
    \ })
''' # }}}

# vim: foldmethod=marker
