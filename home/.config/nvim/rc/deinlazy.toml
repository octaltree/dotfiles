# deoplete {{{
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_source = '''
set completeopt+=noselect
set completeopt-=preview
"let g:deoplete#enable_at_startup = 1
let g:deoplete#auto_complete_delay = 0
let g:deoplete#auto_complete_start_length = 1


inoremap <expr><C-h> deoplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  deoplete#smart_close_popup()."\<C-h>"
imap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>

"let g:cache_completed = {}
"function! s:my_cr_function() abort
"  if has_key(v:completed_item, 'word') && g:cache_completed != v:completed_item
"    let g:cache_completed = v:completed_item
"    return deoplete#close_popup()
"  else
"    return deoplete#close_popup() . "\<CR>"
"  endif
"endfunction
function! s:my_cr_function() abort
  return deoplete#close_popup() . "\<CR>"
endfunction
"imap <silent><expr> <cr> neosnippet#expandable_or_jumpable()?
"  \ "\<Plug>(neosnippet_expand_or_jump)":
"  \ deoplete#close_popup() . "\<CR>"
call deoplete#enable()
'''
# }}}
[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
"set noshowmode
"let g:echodoc#enable_at_startup = 1
let g:echodoc#type = 'floating'
call echodoc#enable()
'''
[[plugins]]
repo = 'simeji/winresizer'
on_cmd = ['WinResizerStartResize', 'WinResizerStartFocus', 'WinResizerStartMove']

# markdown {{{
[[plugins]]
repo = 'kannokanno/previm'
on_cmd = 'PrevimOpen'
hook_add = '''
  let g:previm_open_cmd = 'firefox'
'''
# }}}

# web {{{
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php', 'smarty', 'javascript']
hook_add = '''
  let g:user_emmet_install_global = 0
  autocmd FileType html,css,php,smarty EmmetInstall
  let g:user_emmet_mode='niv'
  let g:user_emmet_expandabbr_key = '<c-e>'
  let g:user_emmet_settings =
        \{ 'variables': { 'lang': 'ja'}
        \, 'indentaion': '  '
        \}
'''
# }}}

# vim {{{
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'
# }}}
